/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizadorlexico.vista;

import analizadorlexico.Tabla;
import codigo.Analizador;
import codigo.AnalizadorSemantico;
import static codigo.AnalizadorSemantico.erroresTipo;
import codigo.AnalizadorSintactico;
import codigo.ListaConvertida;
import static codigo.ListaConvertida.listaED;
import static codigo.ListaConvertida.listaValores;
import static codigo.ListaConvertida.listaVar;
import codigo.tablaVariables;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 *
 */
public class Principal extends javax.swing.JFrame {
private Analizador analizador;
private ListaConvertida listaConvertida;
private AnalizadorSemantico analizadorSemantico;
private tablaVariables tb;

private AnalizadorSintactico analizadorSintactico;
	private ArrayList<String> lineas;
	private ArrayList<String> lista ;
	private ArrayList<String> linea;
       
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        btntabla = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        console.setEditable(false);
        console.setColumns(20);
        console.setRows(5);
        jScrollPane2.setViewportView(console);

        jButton1.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        jButton1.setText("Compilar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        jLabel1.setText("Output-AnalizadorLexico(run)");

        jButton2.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        jButton2.setText("Abrir Archivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btntabla.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        btntabla.setText("Tabla");
        btntabla.setEnabled(false);
        btntabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btntabla, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 50, Short.MAX_VALUE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(btntabla))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       lanzarSelector();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     	                        analizador=new Analizador();
                                analizadorSintactico= new AnalizadorSintactico();
                                listaConvertida= new ListaConvertida();
                                analizadorSemantico= new AnalizadorSemantico();
                                tb= new tablaVariables();  
                          	analizador.getTokens(getTokens(1));
				ArrayList<String> errores=analizador.getErrores();
                                if (errores.isEmpty()) {                                  
                                btntabla.setEnabled(true);
                                String cadena="";
                                ArrayList<String> listaTokens= listaConvertida.convertir(getTokens(2));
                                
                                    for (int i = 0; i < listaTokens.size(); i++) {
                                       cadena+= listaTokens.get(i)+" ";    
                                    }
                                   erroresTipo.clear();
                                  
                                   String cadenaErrores=analizadorSintactico.analizarSintaxis(cadena); 
                                   analizadorSemantico.pintarTablaValores();
                                  
                                  if (cadenaErrores.isEmpty()) {
                                      if (analizadorSemantico.decorarLista(analizadorSintactico.arrayNodos,listaConvertida.listaVar,tb.getArray()).isEmpty()) {
                                          analizadorSemantico.pintarTablaValores();
                                                console.setForeground(Color.GREEN);
                                                console.setText("  BUILD SUCCESSFUL (total time: 4 seconds)");
                                                 tb.tablaV.clear();
                                         
                                          for (int i = 0; i < analizadorSintactico.arrayNodos.size(); i++) {
                                            System.out.println(analizadorSintactico.arrayNodos.get(i).getNumero()+
                                          " \t"+ analizadorSintactico.arrayNodos.get(i).getId()+" \t"+
                                               analizadorSintactico.arrayNodos.get(i).getPadre());              
                                               }
                                           //analizadorSemantico.pintarTablaValores();
                                        //  tb.Imprimir();
                                      }else{
                                          tb.tablaV.clear();
                                         console.setForeground(Color.RED);  
                                         console.setText(analizadorSemantico.ImprimirErroresTipo());  
                                         erroresTipo.clear();
                                        
                                      } 
                                   }else{
                                       tb.tablaV.clear();
                                         console.setForeground(Color.RED);                                       
                                         console.setText(cadenaErrores);
                                         erroresTipo.clear();
                                       
                                     }
                                }else{
                                    	for (int i = 0; i < errores.size(); i++) {
					int j=0;
					boolean band=false;
					do {
						System.out.println(j);
						if (j>=lineas.size()) {
							band=true;
							j++;
						}else{
							if (lineas.get(j).contains(errores.get(i))) {
								band=true;
							}
							j++;
						}
					} while ((!band));
					console.setText(console.getText()+"Error en linea "+(j)+"  ("+errores.get(i)+")\n");
                                        btntabla.setEnabled(false);
				} 
                                }
			                            
				try {
					File archivo=new File("Archivos//ArchT.txt");
                                        FileWriter escribir=new FileWriter(archivo);
					BufferedWriter bw=new BufferedWriter(escribir);
					PrintWriter pw=new PrintWriter(bw);
					ArrayList<String> tk=analizador.getListaT();
					for (int i = 0; i < tk.size(); i++) {
						pw.append(tk.get(i)+"\n");
					}
					pw.close();
					bw.close();
					escribir.close();
				} catch (Exception e) {
					
				}		
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btntablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntablaActionPerformed
    try {
     
        mostrar();
    } catch (SQLException ex) {
        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_btntablaActionPerformed

   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    
     
    public void eliminar(DefaultTableModel tb, JTable table){
        int a = table.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
        tb.removeRow(tb.getRowCount()-1);
        }
    
    }
    public void mostrar() throws SQLException{     
        Tabla t= new Tabla();
        eliminar((DefaultTableModel) t.tabla.getModel(), t.tabla);
        DefaultTableModel md=(DefaultTableModel) t.tabla.getModel();
        md.setColumnIdentifiers(new Object[]{"Nombre", "Existencia"});
          ArrayList<String> variables= analizador.getVar();
        for (int i = 0; i < variables.size(); i++) {
            System.out.println(variables.get(i));
             md.addRow(new Object[]{variables.get(i)});
        }
       
       t.setVisible(true);
       t.tabla.setModel(md);
    }
    
    public static String leerTexto(String ruta){
		  String texto = "";
		  File archivo = new File(ruta);
		  try {
		   FileReader fr = new FileReader(archivo);
		   BufferedReader buffer = new BufferedReader(fr);
		   boolean fin = false;
		   StringBuffer sbf = new StringBuffer();
		   String nl = System.getProperty("line.separator");
		   while(fin == false){
		    String linea = buffer.readLine();
		    if(linea != null){
		     sbf.append(linea + nl);
		    }
		    else{
		     fin = true;
		    }
		   }
		   texto = sbf.toString();		   
		  } 
		  catch (FileNotFoundException e) {
		   e.printStackTrace();
		  }
		  catch (IOException e) {
		   e.printStackTrace();
		  }
		  return texto;
		 }
    	 public static void lanzarSelector(){
		  String ruta = "";
		  File carpetaInicio = new File(System.getProperty("user.home"));
		  JFileChooser jfc = new JFileChooser(carpetaInicio.toString());
		  int resultado = jfc.showOpenDialog(null);
		  jfc.setDialogTitle("Seleccione un archivo para leer: ");
		  if(resultado == JFileChooser.APPROVE_OPTION){
		   ruta = jfc.getSelectedFile().toString();
		   if(ruta != null){
			   textArea.setText(leerTexto(ruta));
		   }
		   else{
		    System.err.println("Selección nula");
		   }
		   
		  }
		 }    
         public ArrayList<String> getTokens( int a){
		String texto=textArea.getText().replace("\n"," Salto ");
		StringTokenizer tokens=new StringTokenizer(texto," =/*;,)({}",true);
		ArrayList<String> listaT=new ArrayList<String>();
		ArrayList<String> listaAux=new ArrayList<String>();
	        lineas=new ArrayList<String>();
		console.setText("");
		String tkLinea = "";
		//Eliminar espacion en blanco y guardar ttokens en linea
		while (tokens.hasMoreElements()) {
			String token=tokens.nextToken().trim();
			if (token.equals(" ")) {			
			}else{
				if (token.equals(" ")) {		
				}
				if (token.equals("Salto")) {
					lineas.add(tkLinea);
					listaT.add(token);
				}else{
					tkLinea+=token+" ";
					listaT.add(token);
				}
				}
		}
		listaT.add("Salto");
		//Eliminar comentarios
		String next="";
		for (int i = 0; i <listaT.size(); i++) {
			if (listaT.get(i).trim().equals("")) {				
			}
			if (listaT.get(i).equals("/")) {
				if (i+1<listaT.size()) {
					if (listaT.get(i+1).equals("/")) {
						do {
							i++;
						} while (!listaT.get(i).equals("Salto")&&i+1<=listaT.size());
						listaAux.add("/");
						listaAux.add("/");
					}else{
						if (listaT.get(i+1).equals("*")) {
							do {
								if (i<=(listaT.size()-3)) {
									next=listaT.get(i+1)+listaT.get(i+2);
									i++;
								}else
									next="*/";
							} while (!next.equals("*/"));
							i=i+1;
							listaAux.add("/");
							listaAux.add("*");
							listaAux.add("*");
							listaAux.add("/");
							//System.out.println("2.-/**/");
						}else{
							listaAux.add(listaT.get(i));
							//System.out.println("3.-"+listaT.get(i));
						}
					}
				}else
					listaAux.add("/");	
			}else{
				if (!listaT.get(i).equals("Salto")) {
					listaAux.add(listaT.get(i));
				}		
			}
				//System.out.println("4.-"+listaT.get(i)+" "+i);
		}
		
                if (a==1) {
                 return listaAux;
                }else{
                 return listaT;
                }	
	}
         
         public String getErrores(ArrayList array){
             String salida="";
             for (int i = 0; i < array.size(); i++) {
                 salida+=array.get(i)+"\n";     
             }
             return salida;
         }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btntabla;
    private javax.swing.JTextArea console;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private static javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
