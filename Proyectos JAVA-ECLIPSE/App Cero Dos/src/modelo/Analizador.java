/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modelo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jordi
 */
public class Analizador extends javax.swing.JFrame {

    String[] palabrasRes = {"INICIO", "FIN", "ENTERO", "DECIMAL", "LEER", "ESCRIBIR", "SUM", "RES", "MUL", "DIV", "{", "}", "(", ")", ";", ",", "=", "."};
    String[] palabrasToken = {"(tk_inicio, INICIO)", "(tk_fin, FIN)", "(tk_tipoEntero, ENTERO)", "(tk_tipoDecimal, DECIMAL)", "(tk_leer, LEER)", "(tk_escribir, ESCRIBIR)", "(tk_sum, SUMA)", "(tk_res, RESTA)", "(tk_mul, MULTIPLICACION)", "(tk_div, DIVISION)", "(tk_llave, {)", "(tk_llave, })", "(tk_paren, ()", "(tk_paren, ))", "(tk_puntoComa, ;)", "(tk_coma, ,)", "(tk_igual, =)", "(tk_punto, .)"};

    private String contenido;
    String[] tokens = new String[500];
    int cToken = 0, cLineas = 1;
    String errores = "";
    char[] c;
    char[] letrasMinu = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    char[] letrasMayu = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'Ñ', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
    char numeros[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    char simbolos[] = {',', '(', ')', '[', ']', ';', '{', '}', '='};

    /**
     * Creates new form Analizador
     */
    public Analizador() {
        initComponents();
    }

    private void crearArchivo(String texto) {
        try {
            FileWriter escrito = new FileWriter("C:\\Users\\Grudges\\Desktop\\ListaDeTokens.txt");
            PrintWriter imprime = new PrintWriter(escrito);
            imprime.print(texto);
            escrito.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tACodigo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTokens = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tAErrores = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("ANALIZADOR LEXICO");

        jButton1.setText("ABRIR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ANALIZAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tACodigo.setColumns(20);
        tACodigo.setRows(5);
        jScrollPane1.setViewportView(tACodigo);

        jTokens.setColumns(20);
        jTokens.setRows(5);
        jScrollPane2.setViewportView(jTokens);

        tAErrores.setColumns(20);
        tAErrores.setRows(5);
        jScrollPane3.setViewportView(tAErrores);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("ERRORES");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("SIMBOLOS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (contenido == null) {
            contenido = tACodigo.getText();
            contenido = contenido.replaceAll("[\n\r]", "¬");
        }
        c = contenido.toCharArray();
        for (int i = 0; i < c.length; i++) {
            if (comparar(c[i], letrasMinu)) {
                i = minusculas(i);
            } else if (comparar(c[i], letrasMayu)) {
                i = mayusculas(i);
            } else if (comparar(c[i], numeros)) {
                i = num(i);
            } else if (comparar(c[i], simbolos)) {
                tokens[cToken] = "" + c[i];
                cToken++;
            } else if (c[i] == ' ') {
            } else if (c[i] == '¬') {
                cLineas++;
            } else {
                errores += "\nERROR LEXICO (" + cLineas + "): Simbolo no valido";
            }
        }
        tAErrores.setText(errores);
        mostrar();
        generarArchivo();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String aux = "";
        String texto = "";
        try {
            JFileChooser file = new JFileChooser(System.getProperty("user.dir"));
            file.showOpenDialog(this);
            File archivo = file.getSelectedFile();
            if (archivo != null) {
                FileReader archivos = new FileReader(archivo);
                BufferedReader leer = new BufferedReader(archivos);
                while ((aux = leer.readLine()) != null) {
                    texto += aux + "\n";
                }
                leer.close();
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error Importando - " + ex);
        }
        contenido = texto;
        contenido = contenido.replaceAll("[\n\r]", "¬");
        tACodigo.setText(texto);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Analizador().setVisible(true);
            }
        });
    }

    public int reservada(int q) {
        q = q - 1;
        boolean termino = false, error = false;
        for (int i = q; i < c.length; i++) {
            if (c[i] == 'I') {
                i++;
                if (c[i] == 'N') {
                    i++;
                    if (c[i] == 'I') {
                        i++;
                        if (c[i] == 'C') {
                            i++;
                            if (c[i] == 'I') {
                                i++;
                                if (c[i] == 'O') {
                                    i++;
                                    if (comparar(c[i], simbolos)) {
                                        tokens[cToken] = "INICIO";
                                        cToken++;
                                        tokens[cToken] = "" + c[i];
                                        cToken++;
                                        termino = true;
                                    } else if (c[i] == ' ') {
                                        tokens[cToken] = "INICIO";
                                        cToken++;
                                        termino = true;
                                    } else if (c[i] == '¬') {
                                        tokens[cToken] = "INICIO";
                                        cLineas++;
                                        cToken++;
                                        termino = true;
                                    } else {
                                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                        error = true;
                                    }
                                } else {
                                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                    error = true;
                                }
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                error = true;
                            }
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (c[i] == 'F') {
                i++;
                if (c[i] == 'I') {
                    i++;
                    if (c[i] == 'N') {
                        i++;
                        if (comparar(c[i], simbolos)) {
                            tokens[cToken] = "FIN";
                            cToken++;
                            tokens[cToken] = "" + c[i];
                            cToken++;
                            termino = true;
                        } else if (c[i] == ' ') {
                            tokens[cToken] = "FIN";
                            cToken++;
                            termino = true;
                        } else if (c[i] == '¬') {
                            tokens[cToken] = "FIN";
                            cToken++;
                            cLineas++;
                            termino = true;
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (c[i] == 'E') {
                i++;
                if (c[i] == 'N') {
                    i++;
                    if (c[i] == 'T') {
                        i++;
                        if (c[i] == 'E') {
                            i++;
                            if (c[i] == 'R') {
                                i++;
                                if (c[i] == 'O') {
                                    i++;
                                    if (comparar(c[i], simbolos)) {
                                        tokens[cToken] = "ENTERO";
                                        cToken++;
                                        tokens[cToken] = "" + c[i];
                                        cToken++;
                                        termino = true;
                                    } else if (c[i] == ' ') {
                                        tokens[cToken] = "ENTERO";
                                        cToken++;
                                        termino = true;
                                    } else if (c[i] == '¬') {
                                        tokens[cToken] = "ENTERO";
                                        cLineas++;
                                        cToken++;
                                        termino = true;
                                    } else {
                                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                        error = true;
                                    }
                                } else {
                                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                    error = true;
                                }
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                error = true;
                            }
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else if (c[i] == 'S') {
                    i++;
                    if (c[i] == 'C') {
                        i++;
                        if (c[i] == 'R') {
                            i++;
                            if (c[i] == 'I') {
                                i++;
                                if (c[i] == 'B') {
                                    i++;
                                    if (c[i] == 'I') {
                                        i++;
                                        if (c[i] == 'R') {
                                            i++;
                                            if (comparar(c[i], simbolos)) {
                                                tokens[cToken] = "ESCRIBIR";
                                                cToken++;
                                                tokens[cToken] = "" + c[i];
                                                cToken++;
                                                termino = true;
                                            } else if (c[i] == ' ') {
                                                tokens[cToken] = "ESCRIBIR";
                                                cToken++;
                                                termino = true;
                                            } else if (c[i] == '¬') {
                                                tokens[cToken] = "ESCRIBIR";
                                                cToken++;
                                                cLineas++;
                                                termino = true;
                                            } else {
                                                errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                                error = true;
                                            }
                                        } else {
                                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                            error = true;
                                        }
                                    } else {
                                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                        error = true;
                                    }

                                }
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                error = true;
                            }
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (c[i] == 'D') {
                i++;
                if (c[i] == 'E') {
                    i++;
                    if (c[i] == 'C') {
                        i++;
                        if (c[i] == 'I') {
                            i++;
                            if (c[i] == 'M') {
                                i++;
                                if (c[i] == 'A') {
                                    i++;
                                    if (c[i] == 'L') {
                                        i++;
                                        if (comparar(c[i], simbolos)) {
                                            tokens[cToken] = "DECIMAL";
                                            cToken++;
                                            tokens[cToken] = "" + c[i];

                                            cToken++;
                                            termino = true;
                                        } else if (c[i] == ' ') {
                                            tokens[cToken] = "DECIMAL";

                                            cToken++;
                                            termino = true;
                                        } else if (c[i] == '¬') {
                                            tokens[cToken] = "DECIMAL";

                                            cToken++;
                                            cLineas++;
                                            termino = true;
                                        } else {
                                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                            error = true;
                                        }
                                    } else {
                                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                        error = true;
                                    }
                                } else {
                                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                    error = true;
                                }
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                error = true;
                            }
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else if (c[i] == 'I') {
                    i++;
                    if (c[i] == 'V') {
                        i++;
                        if (comparar(c[i], simbolos)) {
                            tokens[cToken] = "DIV";

                            cToken++;
                            tokens[cToken] = "" + c[i];

                            cToken++;
                            termino = true;
                        } else if (c[i] == ' ') {
                            tokens[cToken] = "DIV";

                            cToken++;
                            termino = true;
                        } else if (c[i] == '¬') {
                            tokens[cToken] = "DIV";

                            cToken++;
                            cLineas++;
                            termino = true;
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (c[i] == 'L') {
                i++;
                if (c[i] == 'E') {
                    i++;
                    if (c[i] == 'E') {
                        i++;
                        if (c[i] == 'R') {
                            i++;
                            if (comparar(c[i], simbolos)) {
                                tokens[cToken] = "LEER";

                                cToken++;
                                tokens[cToken] = "" + c[i];

                                cToken++;
                                termino = true;
                            } else if (c[i] == ' ') {
                                tokens[cToken] = "LEER";

                                cToken++;
                                termino = true;
                            } else if (c[i] == '¬') {
                                tokens[cToken] = "LEER";

                                cToken++;
                                cLineas++;
                                termino = true;
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                                error = true;
                            }
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (c[i] == 'S') {
                i++;
                if (c[i] == 'U') {
                    i++;
                    if (c[i] == 'M') {
                        i++;
                        if (comparar(c[i], simbolos)) {
                            tokens[cToken] = "SUM";

                            cToken++;
                            tokens[cToken] = "" + c[i];

                            cToken++;
                            termino = true;
                        } else if (c[i] == ' ') {
                            tokens[cToken] = "SUM";

                            cToken++;
                            termino = true;
                        } else if (c[i] == '¬') {
                            tokens[cToken] = "SUM";

                            cToken++;
                            cLineas++;
                            termino = true;
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (c[i] == 'R') {
                i++;
                if (c[i] == 'E') {
                    i++;
                    if (c[i] == 'S') {
                        i++;
                        if (comparar(c[i], simbolos)) {
                            tokens[cToken] = "RES";

                            cToken++;
                            tokens[cToken] = "" + c[i];

                            cToken++;
                            termino = true;
                        } else if (c[i] == ' ') {
                            tokens[cToken] = "RES";

                            cToken++;
                            termino = true;
                        } else if (c[i] == '¬') {
                            tokens[cToken] = "RES";

                            cToken++;
                            cLineas++;
                            termino = true;
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (c[i] == 'M') {
                i++;
                if (c[i] == 'U') {
                    i++;
                    if (c[i] == 'L') {
                        i++;
                        if (comparar(c[i], simbolos)) {
                            tokens[cToken] = "MUL";

                            cToken++;
                            tokens[cToken] = "" + c[i];

                            cToken++;
                            termino = true;
                        } else if (c[i] == ' ') {
                            tokens[cToken] = "MUL";

                            cToken++;
                            termino = true;
                        } else if (c[i] == '¬') {
                            tokens[cToken] = "MUL";

                            cToken++;
                            cLineas++;
                            termino = true;
                        } else {
                            errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                            error = true;
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                        error = true;
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Palabra reservada invalida";
                    error = true;
                }
            }

            if (error) {
                i = recorrer(i);
                termino = true;
                error = false;
            }

            if (termino) {
                q = i;
                i = c.length;
            }

        }
        return q;
    }

    public int recorrer(int i) {
        for (int j = i; j < c.length; j++) {
            if (c[j] == ' ') {
                i = j;
                j = c.length;
            } else if (c[j] == '¬') {
                cLineas++;
                i = j;
                j = c.length;
            } else if (comparar(c[j], simbolos)) {
                tokens[cToken] = "" + c[j];

                cToken++;
                i = j;
                j = c.length;
            }
        }
        return i;
    }

    public int minusculas(int q) {
        int cont = 0;
        String cadena;
        cadena = "" + c[q];
        q++;
        boolean termino = false, id = false;
        for (int j = q; j < c.length; j++) {
            if (comparar(c[j], numeros)) {
                cont++;
                id = true;
                cadena += "" + c[j];
            } else if (c[j] == ' ') {
                if (id) {
                    if (cont <= 3) {
                        tokens[cToken] = cadena;
                        cToken++;
                        cadena = "";
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): identificador no valido";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): identificador no valido";
                }
                termino = true;
            } else if (comparar(c[j], simbolos)) {
                if (id) {
                    if (cont <= 3) {
                        tokens[cToken] = cadena;
                        cToken++;
                        cadena = "";
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                }
                tokens[cToken] = "" + c[j];
                cToken++;
                termino = true;
            } else if (c[j] == '¬') {
                if (id) {
                    if (cont <= 3) {
                        tokens[cToken] = cadena;
                        cToken++;
                        cadena = "";
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                }
                termino = true;
                cLineas++;
            } else {
                errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                j = recorrer(j);
                termino = true;
            }
            if (termino) {
                q = j;
                j = c.length;
            }
        }
        return q;
    }

    public int mayusculas(int q) {
        int cont = 0;
        String cadena;
        cadena = "" + c[q];
        q++;
        boolean termino = false, id = false;
        for (int i = q; i < c.length; i++) {
            if (comparar(c[i], letrasMinu)) {
                errores += "\nERROR LEXICO (" + cLineas + "): Identificador o palabra reservada no valido";
                i = recorrer(i);
                termino = true;
            } else if (comparar(c[i], numeros)) {
                cont++;
                id = true;
                cadena += "" + c[i];
            } else if (comparar(c[i], letrasMayu)) {
                i = reservada(i);
                termino = true;
            } else if (comparar(c[i], simbolos)) {
                if (id) {
                    if (cont <= 3) {
                        tokens[cToken] = cadena;
                        cToken++;
                        cadena = "";
                        tokens[cToken] = "" + c[i];
                        cToken++;
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                }
                termino = true;
            } else if (c[i] == ' ') {
                if (id) {
                    if (cont <= 3) {
                        tokens[cToken] = cadena;
                        cToken++;
                        cadena = "";
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): identificador no valido";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): identificador no valido";
                }
                termino = true;
            } else if (c[i] == '¬') {
                if (id) {
                    if (cont <= 3) {
                        tokens[cToken] = cadena;
                        cToken++;
                        cadena = "";
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                }
                termino = true;
                cLineas++;
            } else {
                errores += "\nERROR LEXICO (" + cLineas + "): Identificador no valido";
                i = recorrer(i);
                termino = true;
            }
            if (termino) {
                q = i;
                i = c.length;
            }
        }
        return q;
    }

    public int num(int q) {
        String cadena = "";
        int ent = 0, dec = 0, decimal = 0;
        boolean termino = false;
        for (int i = q; i < c.length; i++) {
            if (comparar(c[i], numeros)) {
                if (decimal == 0) {
                    cadena += "" + c[i];
                    ent++;
                } else if (decimal == 1) {
                    cadena += "" + c[i];
                    dec++;
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Número invalido";
                    i = recorrer(i);
                    termino = true;
                }
            } else if (c[i] == '.') {
                decimal++;
                cadena += '.';
            } else if (comparar(c[i], letrasMinu)) {
                errores += "\nERROR LEXICO (" + cLineas + "): Número invalido";
                i = recorrer(i);
                termino = true;
            } else if (comparar(c[i], letrasMayu)) {
                errores += "\nERROR LEXICO (" + cLineas + "): Número invalido";
                i = recorrer(i);
                termino = true;
            } else if (comparar(c[i], simbolos)) {
                if (decimal <= 1) {
                    if (ent <= 5) {
                        if (decimal == 1) {
                            if (dec <= 2) {
                                tokens[cToken] = cadena;
                                cToken++;
                                cadena = "";
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Número invalido, parte decimal mayor a 2 digitos";
                            }
                        } else {
                            tokens[cToken] = cadena;
                            cToken++;
                            cadena = "";
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Número invalido, parte entera mayor a 5 digitos";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Número invalido";
                }
                termino = true;
                tokens[cToken] = "" + c[i];
                cToken++;
            } else if (c[i] == ' ') {
                if (decimal <= 1) {
                    if (ent <= 5) {
                        if (decimal == 1) {
                            if (dec <= 2) {
                                tokens[cToken] = cadena;
                                cToken++;
                                cadena = "";
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Número invalido, parte decimal mayor a 2 digitos";
                            }
                        } else {
                            tokens[cToken] = cadena;
                            cToken++;
                            cadena = "";
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Número invalido, parte entera mayor a 5 digitos";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Número invalido";
                }
                termino = true;
            } else if (c[i] == '¬') {
                cLineas++;
                if (decimal <= 1) {
                    if (ent <= 5) {
                        if (decimal == 1) {
                            if (dec <= 2) {
                                tokens[cToken] = cadena;
                                cToken++;
                                cadena = "";
                            } else {
                                errores += "\nERROR LEXICO (" + cLineas + "): Número invalido, parte decimal mayor a 2 digitos";
                            }
                        } else {
                            tokens[cToken] = cadena;

                            cToken++;
                            cadena = "";
                        }
                    } else {
                        errores += "\nERROR LEXICO (" + cLineas + "): Número invalido, parte entera mayor a 5 digitos";
                    }
                } else {
                    errores += "\nERROR LEXICO (" + cLineas + "): Número invalido";
                }
                termino = true;
            } else {
                errores += "\nERROR LEXICO (" + cLineas + "): Número invalido";
            }
            if (termino) {
                q = i;
                i = c.length;
            }
        }
        return q;
    }

    public boolean comparar(char c, char[] v) {
        boolean es = false;
        for (int i = 0; i < v.length; i++) {
            if (c == v[i]) {
                es = true;
            }
        }
        return es;
    }

    public boolean comparar(String xx, char[] v) {
        boolean es = false;
        char x[];
        x = xx.toCharArray();
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < v.length; j++) {
                if (x[i] == v[j]) {
                    es = true;
                }
            }
        }
        return es;
    }

    public int tamanio(String[] v) {
        int t = 0;
        for (int i = 0; i < 500; i++) {
            if (v[i] != null) {
                t++;
            }
        }
        return t;
    }

    public void mostrar() {
        String tabla = "";
        int tamanio = tamanio(tokens);
        for (int i = 0; i < tamanio; i++) {
            for (int j = 0; j < palabrasRes.length; j++) {
                if (comparar(tokens[i], numeros)) {
                    if (comparar(tokens[i], letrasMinu) || comparar(tokens[i], letrasMayu)) {
                        tabla += "" + tokens[i] + "\n";
                        j = palabrasRes.length;
                    }
                }
            }
        }
        jTokens.setText(tabla);
    }

    public void generarArchivo() {
        String archivo = "";
        int tamanio = tamanio(tokens);
        for (int i = 0; i < tamanio; i++) {
            for (int j = 0; j < palabrasRes.length; j++) {
                if (tokens[i].equals(palabrasRes[j])) {
                    archivo += palabrasToken[j] + "\n";
                    j = palabrasRes.length;
                } else if (comparar(tokens[i], numeros)) {
                    if (tokens[i].indexOf('.') >= 0) {
                        archivo += "(tk_numDecimal, " + tokens[i] + ")\n";
                        j = palabrasRes.length;
                    } else {
                        if (comparar(tokens[i], letrasMinu) || comparar(tokens[i], letrasMayu)) {
                            archivo += "(tk_id, " + tokens[i] + ")\n";
                            j = palabrasRes.length;
                        } else {
                            archivo += "(tk_numEntero, " + tokens[i] + ")\n";
                            j = palabrasRes.length;
                        }
                    }
                }
            }
        }
        crearArchivo(archivo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTokens;
    private javax.swing.JTextArea tACodigo;
    private javax.swing.JTextArea tAErrores;
    // End of variables declaration//GEN-END:variables
}
